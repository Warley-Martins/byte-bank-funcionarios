<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dll_Byte_Bank</name>
    </assembly>
    <members>
        <member name="T:_2_ByteBank.Cliente">
             <summary>
            Cliente do banco ByteBanks
             </summary>
        </member>
        <member name="M:_2_ByteBank.Cliente.#ctor">
            <summary>
            Contrutor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.Cliente.#ctor(System.String,System.String,System.String)">
            <summary>
            Construtor do cliente
            </summary>
            <param name="nome">Nome do cliente</param>
            <param name="cpf">CPF do cliente</param>
            <param name="telefone">Telefone do cliente</param>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="cpf"/>, não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="nome"/>, não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="telefone"/>, não pode ser nulo ou vazio</exception>
        </member>
        <member name="P:_2_ByteBank.Cliente.Nome">
            <summary>
            Nome do Clinte
            </summary>
        </member>
        <member name="P:_2_ByteBank.Cliente.CPF">
            <summary>
            CPF do cliente
            </summary>
        </member>
        <member name="P:_2_ByteBank.Cliente.Telefone">
            <summary>
            Telefone celular do cliente
            </summary>
        </member>
        <member name="F:_2_ByteBank.Cliente.DataInicializacao">
            <summary>
            Data na qual o usuario se tornou cliente
            </summary>
        </member>
        <member name="F:_2_ByteBank.Cliente.contaCorrente">
            <summary>
            Conta Corrente do cliente
            </summary>
        </member>
        <member name="M:_2_ByteBank.Cliente.Equals(System.Object)">
            <summary>
            Realiza a comparação entre dois clientes
            </summary>
            <param name="obj">Recebe um cliente</param>
            <returns>Retorna o valor logico da comparação</returns>
        </member>
        <member name="M:_2_ByteBank.Cliente.ToString">
            <summary>
            Dados do cliente
            </summary>
            <returns>Retorna uma string com os dados do cliente</returns>
        </member>
        <member name="M:_2_ByteBank.Cliente.CompareTo(System.Object)">
            <summary>
            Ordena dois objetos do tipo Cliente
            </summary>
            <param name="obj">Cliente a ser comparado</param>
            <returns>Retorna o valor padrão</returns>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="obj"/>, deve ser um Cliente</exception>
        </member>
        <member name="T:_2_ByteBank.ContaCorrente">
            <summary>
            Conta corrente do banco ByteBank
            </summary>
        </member>
        <member name="M:_2_ByteBank.ContaCorrente.#ctor">
            <summary>
            Contrutor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.ContaCorrente.#ctor(System.Int32,System.Int32,System.String)">
            <summary>
            
            </summary>
            <param name="agencia"></param>
            <param name="conta"></param>
            <param name="senha"></param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="titular"/>, referência não definida</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="agencia"/>, não pode ser menor ou igual a 0(zero)</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="conta"/>, não pode ser menor ou igual a 0(zero)</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="senha"/>, não pode ser nulo ou vazio</exception>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Taxa">
            <summary>
            Taxa de operções bancarias
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.QuantidadeContas">
            <summary>
            Quantidade de contas no banco
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Titular">
            <summary>
            Titular da conta corrente
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Senha">
            <summary>
            Senha da conta corrente
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Saldo">
            <summary>
            Saldo da conta corrente
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Agencia">
            <summary>
            Numero de agência da conta corrente
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.Conta">
            <summary>
            Numero da conta
            </summary>
        </member>
        <member name="P:_2_ByteBank.ContaCorrente.ContadorSaquesNaoPermitidos">
            <summary>
            Numero de tentativas que o usuario tentou realizar uma operação não permitida
            </summary>
        </member>
        <member name="M:_2_ByteBank.ContaCorrente.ToString">
            <summary>
            Dados da conta bancaria
            </summary>
            <returns>Retorna uma string com os dados da conta</returns>
        </member>
        <member name="M:_2_ByteBank.ContaCorrente.Equals(System.Object)">
            <summary>
            Compara duas contas correntes
            </summary>
            <param name="obj">Conta corrente a ser comparada</param>
            <returns>Retorna o valor logico da comparação</returns>
        </member>
        <member name="T:_2_ByteBank.OrganizadorBonificacao">
            <summary>
            Organiza o salario dos funcionarios
            </summary>
        </member>
        <member name="M:_2_ByteBank.OrganizadorBonificacao.#ctor">
            <summary>
            Construtor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.OrganizadorBonificacao.SetBonificacao(System.Double)">
            <summary>
            Atribuição ao montante de bonificações
            </summary>
            <param name="bonificacao">Bonificação de um funcionario</param>
        </member>
        <member name="M:_2_ByteBank.OrganizadorBonificacao.GetBonificacao">
            <summary>
            Valor da bonificações
            </summary>
            <returns>Retorna o montante destinado a bonificação</returns>
        </member>
        <member name="T:_2_ByteBank.BancoDeDados.OrganizadorClientes">
            <summary>
            
            </summary>
        </member>
        <member name="M:_2_ByteBank.BancoDeDados.OrganizadorClientes.CadastrarCliente(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Cliente)">
            <summary>
            Realiza o cadastratamento de um novo cliente no sistema
            </summary>
            <param name="novoCliente">Novo cliente</param>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novoCliente"/>, referência não definida</exception>  
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:_2_ByteBank.BancoDeDados.OrganizadorClientes.CadastrarContaCorrente(_2_ByteBank.Funcionarios.Funcionario,System.String,_2_ByteBank.ContaCorrente)">
            <summary>
            Realiza o cadastro de uma conta Conrrente no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <param name="cpfCliente">CPF do cliente titular da conta</param>
            <param name="novaContaCorrente">Nova conta corrente</param>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="cpfCliente"/>, não pode ser nulo ou vazio</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novaContaCorrente"/>, referência não definida</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:_2_ByteBank.BancoDeDados.OrganizadorClientes.ProcurarConta(_2_ByteBank.Funcionarios.Funcionario,System.Int32,System.Int32,System.String)">
            <summary>
            Procura uma conta no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <param name="numeroAgenciaProcurado">Numero da agencia procurada</param>
            <param name="numeroContaProcurado">Numero da canta procurada</param>
            <param name="cpfTitularProcurado">CPF do titular da conta procurada</param>
            <returns>Retorna uma conta corrente, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroAgenciaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroContaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referência não definida</exception>  
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="cpfTitularProcurado"/>, nãopode ser nulo ou vazio</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="T:_2_ByteBank.Funcionarios.OrganizadorFuncionarios">
            <summary>
            Salva os dados dos funcionarios da empresa
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.OrganizadorFuncionarios.Adicionar(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza a admissão de um funcionário
            </summary>
            <param name="funcionarioContratante">Funcionario que realiza o contrato</param>
            <param name="funcionarioContratado">Novo funcionario</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratado"/>, referencia não definida </exception>       
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratante"/>, referencia não definida </exception>
            <returns>Retorna o resultado da contratação</returns>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.OrganizadorFuncionarios.Remover(_2_ByteBank.Funcionarios.Funcionario,System.String)">
            <summary>
            Realiza a admissão de um funcionário
            </summary>
            <param name="funcionario">Funcionario que realiza a demissão</param>
            <param name="cpfFuncionarioDemitido">Funcionario Demitido</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referencia não definida </exception>       
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cpfFuncionarioDemitido"/>, referencia não definida </exception>
            <returns>Retorna o resultado da contratação</returns>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.OrganizadorFuncionarios.ProcurarFuncionario(_2_ByteBank.Funcionarios.Funcionario,System.String)">
            <summary>
            Procura um funcionario no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza a operação</param>
            <param name="cpfFuncionarioProcurado">CPF do funcionario procurado</param>
            <returns>Retorna o funcionario, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametrp: <paramref name="cpfFuncionarioProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="T:_2_ByteBank.Funcionarios.Diretor">
            <summary>
            Funcionario do tipo Diretor
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.#ctor(System.String,System.String,System.String)">
             <summary>
            Contrutor do Diretor 
             </summary>
             <param name="cpf">CPF do Diretor</param>
             <param name="nome">Nome do Diretor</param>
             <param name="senha">Senha de login do Diretor</param>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.#ctor">
            <summary>
            Construtor Default
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.ContratrarFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza o cadastratamento do funcionario no sistema
            </summary>
            <param name="funcionarioContratado">Novo funcionario</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratado"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.DemitirFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza a exlusão do funcionario no sistema
            </summary>
            <param name="funcionarioDemitido">Funcionario Demitido</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioDemitido"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.ProcurarFuncionario(System.String)">
            <summary>
            Procura um funcionario no sistema
            </summary>
            <param name="cpfFuncionarioProcurado">CPF do funcionario procurado</param>
            <returns>Retorna o funcionario, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametrp: <paramref name="cpfFuncionarioProcurado"/>, string nula ou vazia</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.CadastrarCliente(_2_ByteBank.Cliente)">
            <summary>
            Realiza o cadastratamento de um novo cliente no sistema
            </summary>
            <param name="novoCliente">Novo cliente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novoCliente"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.CadastrarContaCorrente(_2_ByteBank.Cliente,_2_ByteBank.ContaCorrente)">
            <summary>
            Realiza o cadastro de uma conta Conrrente no sistema
            </summary>
            <param name="cliente">Cliente titular da conta</param>
            <param name="novaContaCorrente">Nova conta corrente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cliente"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novaContaCorrente"/>, referência não definida</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.ProcurarConta(System.Int32,System.Int32,_2_ByteBank.Cliente)">
            <summary>
            Procura uma conta no sistema
            </summary>
            <param name="numeroAgenciaProcurado">Numero da agencia procurada</param>
            <param name="numeroContaProcurado">Numero da canta procurada</param>
            <param name="titularProcurado">Titular da conta procurada</param>
            <returns>Retorna uma conta corrente, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroAgenciaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroContaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="titularProcurado"/>, Referencia não definida</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.ToString">
            <summary>
            Dados do funcionario do RH
            </summary>
            <returns>Retorna uma string com os dados do RH</returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.Equals(System.Object)">
            <summary>
            Realiza a compração entre dois objetos de tipo RecursosHumanos
            </summary>
            <param name="obj">Funcionario do RH a ser comparado</param>
            <returns>Retorna o valor logico da comparação</returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.AgendarReuniao">
            <summary>
            Agenda uma reuniao entre os funcionarios
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Diretor.PrintarContasBancarias">
            <summary>
            Printa as contas mensais do banco
            </summary>
        </member>
        <member name="T:_2_ByteBank.Funcionarios.Funcionario">
            <summary>
            Funcionario do banco
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Funcionario.#ctor">
            <summary>
            Construtor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Funcionario.#ctor(System.String,System.String,System.Double,System.String,System.Double)">
            <summary>
            Construtor padrão dos funcionarios do banco
            </summary>
            <param name="cpf">CPF do funcionario</param>
            <param name="nome">Nome do funcionario</param>
            <param name="salario">Salario do funcionario</param>
            <param name="senha">Senha do funcionario</param>
            <param name="bonusSalarial">Bonus salarial do funcionario</param>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="cpf"/>, não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="nome"/>, não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="salario"/>, não pode ser menor ou igual a 0(zero)</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="senha"/>, não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="bonusSalarial"/>, não pode ser menor que 0(zero)</exception>
        </member>
        <member name="P:_2_ByteBank.Funcionarios.Funcionario.TotalFuncionarios">
            <summary>
            Total de funcionarios no banco
            </summary>
        </member>
        <member name="P:_2_ByteBank.Funcionarios.Funcionario.Nome">
            <summary>
            Nome do funcionario
            </summary>
        </member>
        <member name="P:_2_ByteBank.Funcionarios.Funcionario.CPF">
            <summary>
            CPF do funcionario
            </summary>
        </member>
        <member name="P:_2_ByteBank.Funcionarios.Funcionario.Salario">
            <summary>
            Salario do funcionario
            </summary>
        </member>
        <member name="P:_2_ByteBank.Funcionarios.Funcionario.BonusSalarial">
            <summary>
            Bonificação do funcionario
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Funcionario.GetSenha">
            <summary>
            Senha do funcionario
            </summary>
            <returns>Retorna a senha do funcionario </returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Funcionario.SetSenha(System.String,System.String)">
            <summary>
            Atualiza a senha do funcionario
            </summary>
            <param name="senhaAtual">Senha atual do funcionario</param>
            <param name="novaSenha">Nova senha do funcionario</param>
            <returns>Retorna o resultado lógico da operação</returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.Funcionario.CompareTo(System.Object)">
            <summary>
            Ordena dois objetos do tipo Funcionario pelo salario
            </summary>
            <param name="obj">Funcionario a ser comparado</param>
            <returns>Retorna o valor padrão</returns>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="obj"/>, deve ser um Funcionario</exception>
        </member>
        <member name="T:_2_ByteBank.Funcionarios.GerenteDeConta">
            <summary>
            Funcionario do tipo GerenteDeConta
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.#ctor(System.String,System.String,System.String)">
             <summary>
            Contrutor do Gerente de Contas
             </summary>
             <param name="cpf">CPF do Gerente de Contas</param>
             <param name="nome">Nome do Gerente de Contas</param>
             <param name="senha">Senha de login do Gerente de Contas</param>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.#ctor">
            <summary>
            Construtor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.CadastrarCliente(_2_ByteBank.Cliente)">
            <summary>
            Realiza o cadastratamento de um novo cliente no sistema
            </summary>
            <param name="novoCliente">Novo cliente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novoCliente"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.CadastrarContaCorrente(_2_ByteBank.Cliente,_2_ByteBank.ContaCorrente)">
            <summary>
            Realiza o cadastro de uma conta Conrrente no sistema
            </summary>
            <param name="cliente">Cliente titular da conta</param>
            <param name="novaContaCorrente">Nova conta corrente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cliente"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novaContaCorrente"/>, referência não definida</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.ProcurarConta(System.Int32,System.Int32,_2_ByteBank.Cliente)">
            <summary>
            Procura uma conta no sistema
            </summary>
            <param name="numeroAgenciaProcurado">Numero da agencia procurada</param>
            <param name="numeroContaProcurado">Numero da canta procurada</param>
            <param name="titularProcurado">Titular da conta procurada</param>
            <returns>Retorna uma conta corrente, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroAgenciaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroContaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="titularProcurado"/>, Referencia não definida</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.ToString">
            <summary>
            Dados do funcionario Gerente de conta
            </summary>
            <returns>Retorna uma string com os dados do RH</returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.GerenteDeConta.Equals(System.Object)">
            <summary>
            Realiza a compração entre dois objetos de tipo RecursosHumanos
            </summary>
            <param name="obj">Funcionario do RH a ser comparado</param>
            <returns>Retorna o valor logico da comparação</returns>
        </member>
        <member name="T:_2_ByteBank.Funcionarios.RecursosHumanos">
            <summary>
            Funcionario do Recursos Humanos do banco
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.#ctor(System.String,System.String,System.String)">
             <summary>
            Contrutor do RH 
             </summary>
             <param name="cpf">CPF do RH</param>
             <param name="nome">Nome do RH</param>
             <param name="senha">Senha de login do RH</param>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.#ctor">
            <summary>
            Controtor default
            </summary>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.ContratrarFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza o cadastratamento do funcionario no sistema
            </summary>
            <param name="funcionarioContratado">Novo funcionario</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratado"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.DemitirFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza a exlusão do funcionario no sistema
            </summary>
            <param name="funcionarioDemitido">Funcionario Demitido</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioDemitido"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.ProcurarFuncionario(System.String)">
            <summary>
            Procura um funcionario no sistema
            </summary>
            <param name="cpfFuncionarioProcurado">CPF do funcionario procurado</param>
            <returns>Retorna o funcionario, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametrp: <paramref name="cpfFuncionarioProcurado"/>, string nula ou vazia</exception>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.ToString">
            <summary>
            Dados do funcionario do RH
            </summary>
            <returns>Retorna uma string com os dados do RH</returns>
        </member>
        <member name="M:_2_ByteBank.Funcionarios.RecursosHumanos.Equals(System.Object)">
            <summary>
            Realiza a compração entre dois objetos de tipo RecursosHumanos
            </summary>
            <param name="obj">Funcionario do RH a ser comparado</param>
            <returns>Retorna o valor logico da comparação</returns>
        </member>
        <member name="T:_2_ByteBank.Interfaces.IControleConta">
            <summary>
            Define os metodos basicos para o controle de uma conta bancaria
            </summary>
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleConta.CadastrarCliente(_2_ByteBank.Cliente)">
            <summary>
            Realiza o cadastratamento de um novo cliente no sistema
            </summary>
            <param name="novoCliente">Novo cliente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novoCliente"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleConta.CadastrarContaCorrente(_2_ByteBank.Cliente,_2_ByteBank.ContaCorrente)">
            <summary>
            Realiza o cadastro de uma conta Conrrente no sistema
            </summary>
            <param name="cliente">Cliente titular da conta</param>
            <param name="novaContaCorrente">Nova conta corrente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cliente"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novaContaCorrente"/>, referência não definida</exception>
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleConta.ProcurarConta(System.Int32,System.Int32,_2_ByteBank.Cliente)">
            <summary>
            Procura uma conta no sistema
            </summary>
            <param name="numeroAgencia">Numero da agencia procurada</param>
            <param name="numeroConta">Numero da canta procurada</param>
            <param name="titular">Titular da conta procurada</param>
            <returns>Retorna uma conta corrente, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroAgencia"/>, string nula ou vazia</exception>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroConta"/>, string nula ou vazia</exception>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="titular"/>, Referencia não definida</exception>
        </member>
        <member name="T:_2_ByteBank.Interfaces.IControleFuncionario">
            <summary>
            Metodos basicos para controle de conta
            </summary>
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleFuncionario.ContratrarFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza o cadastratamento do funcionario no sistema
            </summary>
            <param name="funcionarioContratado">Novo funcionario</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratado"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleFuncionario.DemitirFuncionario(_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza a exlusão do funcionario no sistema
            </summary>
            <param name="funcionarioDemitido">Funcionario Demitido</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioDemitido"/>, referência não definida</exception>  
        </member>
        <member name="M:_2_ByteBank.Interfaces.IControleFuncionario.ProcurarFuncionario(System.String)">
            <summary>
            Procura um funcionario no sistema
            </summary>
            <param name="cpfFuncionarioProcurado">CPF do funcionario procurado</param>
            <returns>Retorna o funcionario, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametrp: <paramref name="cpfFuncionarioProcurado"/>, string nula ou vazia</exception>
        </member>
        <member name="T:_2_ByteBank.Interfaces.ILogarCliente">
            <summary>
            Login do cliente do banco
            </summary>
        </member>
        <member name="M:_2_ByteBank.Interfaces.ILogarCliente.Logar(System.String,System.String)">
            <summary>
            Realiza a validação do login
            </summary>
            <param name="cpf">CPF do cliente</param>
            <param name="senha">Senha do cliente</param>
            <returns></returns>
        </member>
        <member name="T:_2_ByteBank.Interfaces.IReuniao">
            <summary>
            Agendamento de reuniao
            </summary>
        </member>
        <member name="M:_2_ByteBank.Interfaces.IReuniao.AgendarReuniao">
            <summary>
            Agenda uma reuniao entre os funcionarios
            </summary>
        </member>
        <member name="T:Dll_Byte_Bank.ManipulacaoURL">
            <summary>
            Extrai argumentos de uma url
            </summary>
        </member>
        <member name="M:Dll_Byte_Bank.ManipulacaoURL.ExtrairArgumento(System.String,System.String)">
            <summary>
            Realiza a extração dos argumentos de uma url
            </summary>
            <param name="url">URL que sera extraida o argumento</param>
            <param name="nomeParametro">Parametro que contem o argumento desejado</param>
            <returns>Retorna o argumento procurado</returns>
        </member>
        <member name="M:Dll_Byte_Bank.ManipulacaoURL.ConferirDominio(System.String,System.String)">
            <summary>
            Confere o site pertence ao site dominio
            </summary>
            <param name="urlSite">Url testada</param>
            <param name="urlDominio">Url do site dominio</param>
            <returns>Retorna o valor logico da comparação</returns>
            <exception cref="T:System.ArgumentException">O parametro: <paramref name="urlDominio"/> não pode ser nulo ou vazio</exception>
            /// <exception cref="T:System.ArgumentException">O parametro: <paramref name="urlSite"/> não pode ser nulo ou vazio</exception>
        </member>
        <member name="T:Dll_Byte_Bank.MetodosDeExtensao.MetodosDeExtensaoList">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dll_Byte_Bank.MetodosDeExtensao.MetodosDeExtensaoList.AdicionarVariosFuncionarios(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Funcionarios.Funcionario[])">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dll_Byte_Bank.MetodosDeExtensao.MetodosDeExtensaoList.AdicionarVariosClientes(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Cliente[])">
            <summary>
            
            </summary>
            <param name="funcionario"></param>
            <param name="novosClientes"></param>
        </member>
        <member name="T:Dll_Byte_Bank.Sistema.Sistema">
            <summary>
            Classe que intermediaria das operações do banco
            </summary>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.Logar(System.String,System.String)">
            <summary>
            Procura o login do funcionario
            </summary>
            <param name="cpf">CPF do funcionario procurado</param>
            <param name="senha">Senha do funcionario procurado</param>
            <returns>Retorna o funcionario</returns>
            <exception cref="T:System.ArgumentException">O <paramref name="cpf"/> não pode ser nulo ou vazio</exception>
            <exception cref="T:System.ArgumentException">A <paramref name="senha"/> não pode ser nulo ou vazio</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.AdicionarFuncionario(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Funcionarios.Funcionario)">
            <summary>
            Realiza a admissão de um funcionário
            </summary>
            <param name="funcionarioContratante">Funcionario que realiza o contrato</param>
            <param name="funcionarioContratado">Novo funcionario</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratado"/>, referencia não definida </exception>       
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioContratante"/>, referencia não definida </exception>
            <returns>Retorna o resultado da contratação</returns>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.RemoverFuncionario(_2_ByteBank.Funcionarios.Funcionario,System.String)">
            <summary>
            Realiza a admissão de um funcionário
            </summary>
            <param name="funcionario">Funcionario que realiza a demissão</param>
            <param name="funcionarioDemitido">Funcionario Demitido</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referencia não definida </exception>       
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionarioDemitido"/>, referencia não definida </exception>
            <returns>Retorna o resultado da contratação</returns>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.ProcurarFuncionario(_2_ByteBank.Funcionarios.Funcionario,System.String)">
            <summary>
            Procura um funcionario no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza a operação</param>
            <param name="cpfFuncionarioProcurado">CPF do funcionario procurado</param>
            <returns>Retorna o funcionario, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametrp: <paramref name="cpfFuncionarioProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.AdicionarCliente(_2_ByteBank.Funcionarios.Funcionario,_2_ByteBank.Cliente)">
            <summary>
            Realiza o cadastratamento de um novo cliente no sistema
            </summary>
            <param name="novoCliente">Novo cliente</param>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novoCliente"/>, referência não definida</exception>  
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.CadastrarContaCorrente(_2_ByteBank.Funcionarios.Funcionario,System.String,_2_ByteBank.ContaCorrente)">
            <summary>
            Realiza o cadastro de uma conta Conrrente no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <param name="cpfCliente"></param>
            <param name="cliente">Cliente titular da conta</param>
            <param name="novaContaCorrente">Nova conta corrente</param>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cliente"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="novaContaCorrente"/>, referência não definida</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
        <member name="M:Dll_Byte_Bank.Sistema.Sistema.ProcurarContaCorrente(_2_ByteBank.Funcionarios.Funcionario,System.Int32,System.Int32,System.String)">
            <summary>
            Procura uma conta no sistema
            </summary>
            <param name="funcionario">Funcionario que realiza o cadastro</param>
            <param name="numeroAgenciaProcurado">Numero da agencia procurada</param>
            <param name="numeroContaProcurado">Numero da canta procurada</param>
            <param name="cpfTitularProcurado">Titular da conta procurada</param>
            <returns>Retorna uma conta corrente, se encontrado</returns>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroAgenciaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.ArgumentException">No parametro: <paramref name="numeroContaProcurado"/>, string nula ou vazia</exception>
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="funcionario"/>, referência não definida</exception>  
            <exception cref="T:System.NullReferenceException">No parametro: <paramref name="cpfTitularProcurado"/>, Referencia não definida</exception>
            <exception cref="T:Dll_Byte_Bank.Excecoes.FuncionarioInvalidoException">Caso o funcionario não possua acesso para a operação</exception>
        </member>
    </members>
</doc>
